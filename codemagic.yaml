workflows:
  ios-testflight:
    name: DanceDate iOS TestFlight Deploy
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: DanceDate iOS Production
    environment:
      ios_signing:
        provisioning_profiles:
          - DanceDate iOS App Store
        certificates:
          - DanceDate iOS Distribution
      vars:
        BUNDLE_ID: "com.antho.dancedate"
        XCODE_WORKSPACE: "DanceDate.xcworkspace"
        XCODE_SCHEME: "DanceDate"
      node: 18.20.4
      xcode: 15.2
      cocoapods: default
    scripts:
      - name: Install npm dependencies
        script: |
          npm install
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli
      - name: Create missing assets
        script: |
          mkdir -p assets/sounds
          touch assets/sounds/notification.wav
      - name: Expo prebuild
        script: |
          npx expo prebuild --platform ios --clean
      - name: Install CocoaPods dependencies
        script: |
          cd ios && pod install --repo-update
      - name: Clean Xcode DerivedData
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
      - name: Clean Codemagic caches and stale Pods
        script: |
          # Clean DerivedData and stale Pods to ensure Podfile changes apply
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ios/Pods ios/Podfile.lock
          # Complete clean of all build artifacts and caches
          rm -rf node_modules
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf ~/Library/Caches/CocoaPods
          # Reinstall with forced react-native-screens 3.31.1
          npm install
      - name: Verify react-native-screens version and C++17 settings
        script: |
          cd ios
          # Check react-native-screens version
          echo "📦 Checking react-native-screens version:"
          npm list react-native-screens
          # Check if C++17 settings are present in Podfile for RNScreens
          if grep -q "target.name == 'RNScreens'" Podfile; then
            echo "✅ RNScreens-specific C++17 settings found in Podfile"
            grep -A 10 "target.name == 'RNScreens'" Podfile
          else
            echo "⚠️ RNScreens-specific C++17 settings not found in Podfile"
          fi
      - name: Install CocoaPods with C++17 settings
        script: |
          cd ios
          # Install Pods with the updated Podfile that forces C++17 for RNScreens
          pod install --repo-update
          # Verify the Podfile changes were applied
          echo "🔍 Verifying Podfile C++17 settings were applied:"
          if grep -q "target.name == 'RNScreens'" Podfile; then
            echo "✅ Podfile contains RNScreens-specific C++17 settings"
          else
            echo "❌ Podfile missing RNScreens-specific C++17 settings"
          fi
      - name: Create ExportOptions.plist
        script: |
          cd ios
          # Create ExportOptions.plist for IPA export
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>RZ3LX2QC88</string>
          </dict>
          </plist>
          EOF
      - name: Fix iOS deployment targets
        script: |
          cd ios
          # Fix deployment target warnings by setting minimum iOS version
          find . -name "*.pbxproj" -exec sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]*;/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/g' {} \;
      - name: Set up code signing settings on Xcode project
        script: |
          cd ios
          xcode-project use-profiles
      - name: Final clean before archive
        script: |
          # Final cleanup to ensure no cached build settings
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf ~/Library/Caches/CocoaPods
          # Verify clean state
          echo "🧹 Cleanup complete - no cached build settings should remain"
      - name: Build ipa for distribution
        script: |
          cd ios
          # Clean build folder first
          xcodebuild clean \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release
          
          # Build archive with automatic code signing and compilation fixes
          xcodebuild archive \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath DanceDate.xcarchive \
            DEVELOPMENT_TEAM=RZ3LX2QC88 \
            CODE_SIGN_STYLE=Automatic \
            -allowProvisioningUpdates \
            COMPILER_INDEX_STORE_ENABLE=NO \
            SWIFT_COMPILATION_MODE=wholemodule \
            SWIFT_OPTIMIZATION_LEVEL=-O \
            CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER=NO \
            GCC_WARN_INHIBIT_ALL_WARNINGS=YES \
            CLANG_WARN_DOCUMENTATION_COMMENTS=NO \
            CLANG_WARN_STRICT_PROTOTYPES=NO \
            CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION=NO \
            ONLY_ACTIVE_ARCH=NO
          
          # Export IPA with absolute path to ExportOptions.plist
          xcodebuild -exportArchive \
            -archivePath DanceDate.xcarchive \
            -exportPath exports \
            -exportOptionsPlist "$(pwd)/ExportOptions.plist"
    artifacts:
      - build/ios/ipa/*.ipa
      - ios/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: false
