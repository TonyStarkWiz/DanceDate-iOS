import { auth } from '@/config/firebase';
import { useAuth } from '@/contexts/AuthContext';
import { router } from 'expo-router';
import React from 'react';
import { Alert, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function EntryScreen() {
  const { signOutUser, forceClearSession } = useAuth();

  const handleForceLogout = async () => {
    try {
      console.log('ðŸ§ª EntryScreen: Starting force logout...');
      
      Alert.alert(
        'Force Logout',
        'This will completely clear all authentication data and force you to sign in again. Continue?',
        [
          {
            text: 'Cancel',
            style: 'cancel',
          },
          {
            text: 'Force Logout',
            style: 'destructive',
            onPress: async () => {
              try {
                console.log('ðŸ§ª EntryScreen: User confirmed force logout');
                
                // Clear all possible storage
                if (typeof window !== 'undefined') {
                  // Clear localStorage
                  localStorage.clear();
                  console.log('ðŸ§ª EntryScreen: localStorage cleared');
                  
                  // Clear sessionStorage
                  sessionStorage.clear();
                  console.log('ðŸ§ª EntryScreen: sessionStorage cleared');
                  
                  // Clear any cookies
                  document.cookie.split(";").forEach(function(c) { 
                    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
                  });
                  console.log('ðŸ§ª EntryScreen: cookies cleared');
                  
                  // Try Firebase signOut if available
                  try {
                    if (auth && typeof auth.signOut === 'function') {
                      await auth.signOut();
                      console.log('ðŸ§ª EntryScreen: Firebase signOut completed');
                    }
                  } catch (firebaseError) {
                    console.warn('ðŸ§ª EntryScreen: Firebase signOut error:', firebaseError);
                  }
                  
                  // Try AuthContext methods if available
                  try {
                    if (typeof forceClearSession === 'function') {
                      await forceClearSession();
                      console.log('ðŸ§ª EntryScreen: Force clear session completed');
                    }
                  } catch (sessionError) {
                    console.warn('ðŸ§ª EntryScreen: Force clear session error:', sessionError);
                  }
                  
                  try {
                    if (typeof signOutUser === 'function') {
                      await signOutUser();
                      console.log('ðŸ§ª EntryScreen: SignOutUser completed');
                    }
                  } catch (signOutError) {
                    console.warn('ðŸ§ª EntryScreen: SignOutUser error:', signOutError);
                  }
                }
                
                // Force navigation to welcome screen
                console.log('ðŸ§ª EntryScreen: Navigating to welcome screen');
                router.replace('/welcome');
                
                Alert.alert(
                  'Logout Complete',
                  'All authentication data has been cleared. You will need to sign in again.',
                  [{ text: 'OK' }]
                );
                
              } catch (error) {
                console.error('ðŸ§ª EntryScreen: Force logout error:', error);
                Alert.alert(
                  'Logout Error',
                  'There was an error during logout, but you can still try signing in again.',
                  [{ text: 'OK' }]
                );
                // Still navigate to welcome screen
                router.replace('/welcome');
              }
            },
          },
        ]
      );
      
    } catch (error) {
      console.error('ðŸ§ª EntryScreen: Error in handleForceLogout:', error);
      Alert.alert('Error', 'Failed to initiate logout process.');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>DanceDate</Text>
      <Text style={styles.subtitle}>Your dance partner discovery app</Text>
      
      <TouchableOpacity 
        style={styles.button}
        onPress={() => router.push('/welcome')}
      >
        <Text style={styles.buttonText}>Get Started</Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        style={styles.logoutButton}
        onPress={handleForceLogout}
      >
        <Text style={styles.logoutButtonText}>Force Logout</Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        style={[styles.logoutButton, { marginTop: 10, backgroundColor: 'rgba(0, 255, 0, 0.2)', borderColor: '#00ff00' }]}
        onPress={async () => {
          console.log('ðŸ§ª EntryScreen: Direct Firebase signOut...');
          try {
            if (auth && typeof auth.signOut === 'function') {
              await auth.signOut();
              console.log('ðŸ§ª EntryScreen: Direct Firebase signOut completed');
              Alert.alert('Success', 'Firebase signOut completed successfully');
            } else {
              console.warn('ðŸ§ª EntryScreen: Firebase auth not available');
              Alert.alert('Error', 'Firebase auth not available');
            }
          } catch (error) {
            console.error('ðŸ§ª EntryScreen: Direct Firebase signOut error:', error);
            Alert.alert('Error', 'Firebase signOut failed: ' + error.message);
          }
        }}
      >
        <Text style={[styles.logoutButtonText, { color: '#00ff00' }]}>Direct Firebase SignOut</Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        style={[styles.logoutButton, { marginTop: 10, backgroundColor: 'rgba(255, 255, 255, 0.1)' }]}
        onPress={() => {
          try {
            console.log('ðŸ§ª EntryScreen: Checking auth state...');
            
            let authInfo = 'Auth State Check:\n\n';
            
            // Check Firebase Auth
            try {
              const currentUser = auth?.currentUser;
              authInfo += `Firebase User: ${currentUser ? currentUser.email : 'None'}\n`;
              authInfo += `User ID: ${currentUser ? currentUser.uid : 'None'}\n\n`;
              console.log('ðŸ§ª EntryScreen: Current Firebase user:', currentUser);
            } catch (firebaseError) {
              authInfo += `Firebase Auth Error: ${firebaseError.message}\n\n`;
              console.warn('ðŸ§ª EntryScreen: Firebase auth check error:', firebaseError);
            }
            
            // Check localStorage
            try {
              const localKeys = Object.keys(localStorage);
              authInfo += `localStorage Keys: ${localKeys.length}\n`;
              if (localKeys.length > 0) {
                authInfo += `Keys: ${localKeys.slice(0, 5).join(', ')}${localKeys.length > 5 ? '...' : ''}\n`;
              }
              console.log('ðŸ§ª EntryScreen: localStorage keys:', localKeys);
            } catch (localError) {
              authInfo += `localStorage Error: ${localError.message}\n`;
              console.warn('ðŸ§ª EntryScreen: localStorage check error:', localError);
            }
            
            // Check sessionStorage
            try {
              const sessionKeys = Object.keys(sessionStorage);
              authInfo += `sessionStorage Keys: ${sessionKeys.length}\n`;
              if (sessionKeys.length > 0) {
                authInfo += `Keys: ${sessionKeys.slice(0, 5).join(', ')}${sessionKeys.length > 5 ? '...' : ''}\n`;
              }
              console.log('ðŸ§ª EntryScreen: sessionStorage keys:', sessionKeys);
            } catch (sessionError) {
              authInfo += `sessionStorage Error: ${sessionError.message}\n`;
              console.warn('ðŸ§ª EntryScreen: sessionStorage check error:', sessionError);
            }
            
            Alert.alert('Current Auth State', authInfo, [{ text: 'OK' }]);
            
          } catch (error) {
            console.error('ðŸ§ª EntryScreen: Auth state check error:', error);
            Alert.alert('Error', 'Failed to check auth state. See console for details.');
          }
        }}
      >
        <Text style={styles.logoutButtonText}>Check Auth State</Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        style={[styles.logoutButton, { marginTop: 10, backgroundColor: 'rgba(255, 0, 0, 0.2)', borderColor: '#ff0000' }]}
        onPress={async () => {
          console.log('ðŸ§ª EntryScreen: Nuclear logout - clearing everything...');
          
          try {
            // Clear all storage
            localStorage.clear();
            sessionStorage.clear();
            console.log('ðŸ§ª EntryScreen: Storage cleared');
            
            // Force Firebase signOut
            if (auth && typeof auth.signOut === 'function') {
              await auth.signOut();
              console.log('ðŸ§ª EntryScreen: Firebase signOut completed');
            }
            
            // Force navigation
            console.log('ðŸ§ª EntryScreen: Navigating to welcome screen');
            router.replace('/welcome');
            
            Alert.alert(
              'Nuclear Logout Complete',
              'All storage has been cleared and you have been signed out.',
              [{ text: 'OK' }]
            );
          } catch (error) {
            console.error('ðŸ§ª EntryScreen: Nuclear logout error:', error);
            // Even if there's an error, try to navigate
            router.replace('/welcome');
            Alert.alert(
              'Nuclear Logout Complete',
              'All storage has been cleared and you have been redirected.',
              [{ text: 'OK' }]
            );
          }
        }}
      >
        <Text style={[styles.logoutButtonText, { color: '#ff0000' }]}>Nuclear Logout</Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        style={[styles.logoutButton, { marginTop: 10, backgroundColor: 'rgba(255, 165, 0, 0.2)', borderColor: '#ffa500' }]}
        onPress={() => {
          console.log('ðŸ§ª EntryScreen: Browser-based logout...');
          
          // Direct browser logout - bypass all Firebase
          try {
            // Clear all storage
            localStorage.clear();
            sessionStorage.clear();
            
            // Clear all cookies
            document.cookie.split(";").forEach(function(c) { 
              document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
            });
            
            // Force page reload to clear all state
            console.log('ðŸ§ª EntryScreen: Reloading page to clear all state...');
            window.location.href = '/welcome';
            
          } catch (e) {
            console.error('ðŸ§ª EntryScreen: Browser logout error:', e);
            // Fallback: just navigate
            router.replace('/welcome');
          }
        }}
      >
        <Text style={[styles.logoutButtonText, { color: '#ffa500' }]}>Browser Logout</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#4A148C',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 30,
  },
  title: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 18,
    color: '#fff',
    opacity: 0.9,
    textAlign: 'center',
    marginBottom: 50,
  },
  button: {
    backgroundColor: '#fff',
    borderRadius: 25,
    paddingVertical: 15,
    paddingHorizontal: 40,
  },
  buttonText: {
    color: '#4A148C',
    fontSize: 18,
    fontWeight: '600',
  },
  logoutButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: '#fff',
    borderRadius: 25,
    paddingVertical: 15,
    paddingHorizontal: 40,
    marginTop: 20,
  },
  logoutButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});



