rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { 
      return request.auth != null; 
    }
    
    function isOwner(uid) { 
      return request.auth != null && request.auth.uid == uid; 
    }
    
    function isParticipant(participants) {
      return request.auth != null && request.auth.uid in participants;
    }

    // User profile document per uid
    match /users/{uid} {
      allow read: if isSignedIn(); // Allow reading all user profiles for matching
      allow update, delete: if isOwner(uid);
      allow create: if isSignedIn() && request.auth.uid == uid;
    }

    // User preferences subcollection
    match /users/{uid}/preferences/{doc} {
      allow read, write: if isOwner(uid);
    }

    // Events collection - users can read all events, create if signed in
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    // Matches collection - users can read all matches for matching system
    match /matches/{matchId} {
      allow read: if isSignedIn(); // Allow reading all matches for matching system
      allow write: if isSignedIn() && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == resource.data.createdBy);
    }

    // Likes collection - users can read all likes for matching system
    match /likes/{likeId} {
      allow read: if isSignedIn(); // Allow reading all likes for matching system
      allow write: if isSignedIn() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
    }

    // Dislikes collection - users can read all dislikes for matching system
    match /dislikes/{dislikeId} {
      allow read: if isSignedIn(); // Allow reading all dislikes for matching system
      allow write: if isSignedIn() && request.auth.uid == resource.data.fromUserId;
    }

    // Chats collection - users can read all chats for matching system
    match /chats/{chatId} {
      allow read: if isSignedIn(); // Allow reading all chats for matching system
      allow write: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
    }

    // Messages collection - users can read all messages for matching system
    match /messages/{messageId} {
      allow read: if isSignedIn(); // Allow reading all messages for matching system
      allow write: if isSignedIn() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants;
    }

    // API logs collection - users can only access their own API call logs
    match /api_logs/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Event interests collection - users can read all interests (for matching), but only write their own
    match /event_interests/{interestId} {
      allow read: if isSignedIn(); // Allow reading all interests for matching
      allow write: if isSignedIn() && 
        request.auth.uid == interestId.split('_')[0]; // Only write own interests
    }

    // Event matches collection - users can read all matches for matching system
    match /event_matches/{matchId} {
      allow read: if isSignedIn(); // Allow reading all matches for matching system
      allow write: if isSignedIn() && 
        (request.auth.uid == resource.data.userId1 || 
         request.auth.uid == resource.data.userId2);
    }

    // Dance styles and locations - public read access
    match /danceStyles/{doc} {
      allow read: if true;
      allow write: if false; // Only admin can modify
    }

    match /locations/{doc} {
      allow read: if true;
      allow write: if false; // Only admin can modify
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
